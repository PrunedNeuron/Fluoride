package model

import (
	"encoding/json"
	"fluoride/pkg/errors"
	"fmt"
	"time"

	"go.uber.org/zap"
)

// Icon is the icon request type
type Icon struct {
	ID         int       `json:"id" boil:"id" db:"id"`                         // Icon request ID
	Name       string    `json:"name" boil:"name" db:"name"`                   // App name
	Component  string    `json:"component" boil:"component" db:"component"`    // App component
	URL        string    `json:"url" boil:"url" db:"url"`                      // Play Store URL (may be autogenerated)
	Requesters int       `json:"requesters" boil:"requesters" db:"requesters"` // Number of requesters
	Status     string    `json:"status" boil:"status" db:"status"`             // Status of request (pending / complete)
	Pack       string    `json:"pack" boil:"pack" db:"pack"`                   // Name of the  Icon pack it belongs to
	CreatedAt  time.Time `json:"created_at" boil:"created_at" db:"created_at"` // Date created at
	UpdatedAt  time.Time `json:"updated_at" boil:"updated_at" db:"updated_at"` // Date updated at
}

func (icon *Icon) String() string {
	json, err := json.Marshal(icon)
	if err != nil {
		zap.S().Errorf("Failed to marshal struct into json, error: %s\n", err)
		return errors.ErrMarshal.Error()
	}
	return fmt.Sprintf(string(json))
}
